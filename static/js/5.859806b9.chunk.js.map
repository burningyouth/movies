{"version":3,"sources":["components/Detail.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","marginTop","breakpoints","down","genresWrapper","chip","marginRight","marginBottom","cursor","backgroundColor","tagline","fontSize","gutterBottom","link","textDecoration","Detail","movie","handleQuery","classes","media","height","backgroundOrigin","backgroundSize","backgroundImage","poster_path","maxWidth","container","spacing","className","item","xs","sm","md","lg","title","src","variant","component","color","overview","release_date","budget","budgetString","revenue","revenueString","vote_average","vote_count","Array","isArray","genres","map","genre","to","onClick","key","label"],"mappings":"iPAYMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAK,aACHC,UAAW,IACVH,EAAMI,YAAYC,KAAK,MAAQ,CAC9BF,UAAW,KAGfG,cAAe,CACbH,UAAW,IAEbI,KAAM,CACJC,YAAa,GACbC,aAAc,GACdC,OAAQ,UACR,UAAW,CACTC,gBAAiB,qBAGrBC,QAAS,CACPC,SAAU,UAEZC,aAAc,CACZL,aAAc,UAEhBM,KAAM,CACJC,eAAgB,aAKP,SAASC,EAAT,GAAsD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,YAChCC,EAAUtB,IAERuB,EAAUtB,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXoB,MAAM,aACJC,OAAQ,IACRC,iBAAkB,SAClBC,eAAgB,QAChBC,gBAAgB,OAAD,OAASP,EAAMQ,YAAf,yBACd1B,EAAMI,YAAYC,KAAK,MAAQ,CAC9BiB,OAAQ,UAREvB,GAAVsB,MAcR,OACE,kBAAC,IAAD,CAAWM,SAAS,MAClB,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAWV,EAAQlB,MAC7C,kBAAC,IAAD,CAAM6B,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACnC,kBAAC,IAAD,CACEL,UAAWT,EACXe,MAAM,eACNC,IAAI,kBAGR,kBAAC,IAAD,CAAMN,MAAI,EAACC,IAAE,GACX,yBAAKF,UAAWV,EAAQN,cACtB,kBAAC,IAAD,CAAYwB,QAAQ,KAAKC,UAAU,MAChCrB,EAAMkB,OAERlB,EAAMN,SACL,kBAAC,IAAD,CACEkB,UAAWV,EAAQR,QACnB0B,QAAQ,KACRE,MAAM,gBACND,UAAU,MAETrB,EAAMN,UAIZM,EAAMuB,UACL,kBAAC,IAAD,CACEH,QAAQ,QACRE,MAAM,gBACND,UAAU,IACVT,UAAWV,EAAQN,cAElBI,EAAMuB,UAGX,kBAAC,IAAD,CACE3B,cAAY,EACZwB,QAAQ,QACRC,UAAU,KACVC,MAAM,iBAJR,aAMatB,EAAMwB,cAEnB,kBAAC,IAAD,CACE5B,cAAY,EACZwB,QAAQ,QACRC,UAAU,KACVC,MAAM,iBAJR,UAMU,IACPtB,EAAMyB,OAAN,WAAmBzB,EAAM0B,cAAiB,0BAE7C,kBAAC,IAAD,CACE9B,cAAY,EACZwB,QAAQ,QACRC,UAAU,KACVC,MAAM,iBAJR,WAMW,IACRtB,EAAM2B,QAAN,WACO3B,EAAM4B,eACV,0BAEN,kBAAC,IAAD,CACEhC,cAAY,EACZwB,QAAQ,QACRC,UAAU,KACVC,MAAM,iBAJR,UAMU,IACPtB,EAAM6B,aAAN,UACM7B,EAAM6B,aADZ,kBACkC7B,EAAM8B,WADxC,WAEG,oBAEN,yBAAKlB,UAAWV,EAAQd,eACrB2C,MAAMC,QAAQhC,EAAMiC,SACnBjC,EAAMiC,OAAOC,KAAI,SAACC,GAAD,OACf,kBAAC,IAAD,CACEC,GAAG,IACHC,QAAS,kBAAMpC,EAAYkC,IAC3BG,IAAKH,EACLvB,UAAWV,EAAQL,MAEnB,kBAAC,IAAD,CAAM0C,MAAOJ,EAAOvB,UAAWV,EAAQb","file":"static/js/5.859806b9.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Chip from '@material-ui/core/Chip';\n\nimport { CardMedia, Theme, createStyles } from '@material-ui/core';\nimport { DetailProps } from '../typings';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      marginTop: 40,\n      [theme.breakpoints.down('xs')]: {\n        marginTop: 20,\n      },\n    },\n    genresWrapper: {\n      marginTop: 20,\n    },\n    chip: {\n      marginRight: 10,\n      marginBottom: 10,\n      cursor: 'pointer',\n      '&:hover': {\n        backgroundColor: 'rgb(210,210,210)',\n      },\n    },\n    tagline: {\n      fontSize: '1.2rem',\n    },\n    gutterBottom: {\n      marginBottom: '0.5rem',\n    },\n    link: {\n      textDecoration: 'none',\n    },\n  }),\n);\n\nexport default function Detail({ movie, handleQuery }: DetailProps) {\n  const classes = useStyles();\n\n  const { media } = makeStyles((theme: Theme) =>\n    createStyles({\n      media: {\n        height: 600,\n        backgroundOrigin: 'center',\n        backgroundSize: 'cover',\n        backgroundImage: `url(${movie.poster_path}), url(notfound.jpg)`,\n        [theme.breakpoints.down('xs')]: {\n          height: 400,\n        },\n      },\n    }),\n  )();\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container spacing={3} className={classes.root}>\n        <Grid item xs={12} sm={7} md={5} lg={4}>\n          <CardMedia\n            className={media}\n            title=\"Movie poster\"\n            src=\"notfound.jpg\"\n          />\n        </Grid>\n        <Grid item xs>\n          <div className={classes.gutterBottom}>\n            <Typography variant=\"h4\" component=\"h1\">\n              {movie.title}\n            </Typography>\n            {movie.tagline && (\n              <Typography\n                className={classes.tagline}\n                variant=\"h6\"\n                color=\"textSecondary\"\n                component=\"h2\"\n              >\n                {movie.tagline}\n              </Typography>\n            )}\n          </div>\n          {movie.overview && (\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              component=\"p\"\n              className={classes.gutterBottom}\n            >\n              {movie.overview}\n            </Typography>\n          )}\n          <Typography\n            gutterBottom\n            variant=\"body2\"\n            component=\"h4\"\n            color=\"textSecondary\"\n          >\n            Released: {movie.release_date}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant=\"body2\"\n            component=\"h4\"\n            color=\"textSecondary\"\n          >\n            Budget:{' '}\n            {movie.budget ? `$${movie.budgetString}` : 'Not enough information'}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant=\"body2\"\n            component=\"h4\"\n            color=\"textSecondary\"\n          >\n            Revenue:{' '}\n            {movie.revenue\n              ? `$${movie.revenueString}`\n              : 'Not enough information'}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant=\"body2\"\n            component=\"h4\"\n            color=\"textSecondary\"\n          >\n            Rating:{' '}\n            {movie.vote_average\n              ? `${movie.vote_average} / 10 (${movie.vote_count} votes)`\n              : 'Not enough votes'}\n          </Typography>\n          <div className={classes.genresWrapper}>\n            {Array.isArray(movie.genres) &&\n              movie.genres.map((genre) => (\n                <Link\n                  to=\"/\"\n                  onClick={() => handleQuery(genre)}\n                  key={genre}\n                  className={classes.link}\n                >\n                  <Chip label={genre} className={classes.chip} />\n                </Link>\n              ))}\n          </div>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n"],"sourceRoot":""}